//
//  ViewController.swift
//  swiftFunctionsDemo
//
//  Created by QuocTN on 17/05/2024.
//

import UIKit

class ViewController: UIViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        //VD s·ª≠ d·ª•ng GCD
//        fetchDataFromNetwork()
        //VD s·ª≠ d·ª•ng OperationQueue
//        threadOperationQueue()
        //VD Main queue v√† Global queue
//        updateUI()
//        doBackgroundWork()
        //VD v·ªÅ ƒë·ªô ∆∞u ti√™n Qos trong global queue
//        concurentQueue()
        
        //VD sysn v√† asyn
//        sysnchronousTask()
//        asynchronousTask()
//        qosDispathQueue()
    }
    
    func fetchDataFromNetwork() {
        // T·∫°o m·ªôt queue ri√™ng ƒë·ªÉ th·ª±c hi·ªán t√°c v·ª• background
        let backgroundQueue = DispatchQueue.global(qos: .background)
        
        backgroundQueue.async {
            // M√¥ ph·ªèng vi·ªác l·∫•y d·ªØ li·ªáu t·ª´ m·∫°ng
            print("Fetching data from network...")
            sleep(2) // M√¥ ph·ªèng ƒë·ªô tr·ªÖ m·∫°ng
            
            let data = "Fetched Data"
            
            // Chuy·ªÉn v·ªÅ main thread ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán
            DispatchQueue.main.async {
                print("Updating UI with data: \(data)")
            }
        }
    }
    
    func threadOperationQueue() {
        let operationQueue = OperationQueue()

        let operation1 = BlockOperation {
            print("Operation 1 started")
            sleep(1)
            print("Operation 1 finished")
        }

        let operation2 = BlockOperation {
            print("Operation 2 started")
            sleep(1)
            print("Operation 2 finished")
        }
        operation2.addDependency(operation1)

        operationQueue.addOperation(operation1)
        operationQueue.addOperation(operation2)
    }
    
    func sysnchronousTask() {
        //gi·∫£ s·ª≠ ch√∫ng ta s·∫Ω th·ª±c hi·ªán c√°c c√¥ng vi·ªác c·ªßa c·ªßa func smile v√† love
        for _ in 1...5 {
            Thread.sleep(forTimeInterval: 1)
            self.smile()
        }
        for _ in 1...5 {
            Thread.sleep(forTimeInterval: 1)
            self.love()
        }
    }
    
    func asynchronousTask() {
        let queue = DispatchQueue.global(qos: .background)
        //·ªü v√≠ d·ª• sau ta s·∫Ω th·ª±c hi·ªán ƒë·ªìng th·ªùi 2 t√°c v·ª•
        queue.async {
            for _ in 1...5 {
                Thread.sleep(forTimeInterval: 1)
                self.smile()
            }
        }
        
        queue.async {
            for _ in 1...5 {
                Thread.sleep(forTimeInterval: 1)
                self.love()
            }
        }
    }
    
    func demoDispatchGroup1() {
        let group = DispatchGroup()
        let queue = DispatchQueue.global()
        
        group.enter()
        queue.async {
            // C√¥ng vi·ªác 1
            print("Task 1 started")
            sleep(2) // Gi·∫£ l·∫≠p c√¥ng vi·ªác m·∫•t 2 gi√¢y
            print("Task 1 completed")
            group.leave()
        }
        
        group.enter()
        queue.async {
            // C√¥ng vi·ªác 2
            print("Task 2 started")
            sleep(1) // Gi·∫£ l·∫≠p c√¥ng vi·ªác m·∫•t 1 gi√¢y
            print("Task 2 completed")
            group.leave()
        }
    }
    
    func demoDispatchGroup2() {
        let group = DispatchGroup()
        let queue = DispatchQueue.global()

        queue.async(group: group) {
            // C√¥ng vi·ªác 1
            print("Task 1 started")
            sleep(2)
            print("Task 1 completed")
        }

        queue.async(group: group) {
            // C√¥ng vi·ªác 2
            print("Task 2 started")
            sleep(1)
            print("Task 2 completed")
        }
    }
    
    func smile(){
        print("*-_-*")
    }
    func love(){
        print("<3")
    }
    
    func concurentQueue(){
        let queue = DispatchQueue(label: "h√≥ng ConcurrentQueue", qos: .default, attributes: .concurrent)
        let queueUserInteractive = DispatchQueue(label: "UserInteractive ConcurrentQueue", qos: .userInteractive, attributes: .concurrent)
        queue.async {
            for _ in 1...5 {
                Thread.sleep(forTimeInterval: 1)
                self.smile()
            }
        }
        
        queueUserInteractive.async {
            for _ in 1...5 {
                Thread.sleep(forTimeInterval: 1)
                self.love()
            }
        }
//        print("Current thread: \(Thread.current)")
    }
    
    func doBackgroundWork() {
        //S·ª≠ d·ª•ng global queue ƒë·ªÉ ch·∫°y v·ªõi m·ª©c ƒë·ªô ∆∞u ti√™n l√† background
        DispatchQueue.global(qos: .background).async {
            //in ra lu·ªìng ƒëang th·ª±c thi
            print("Background thread: \(Thread.current)")
            //Ki·ªÉm tra n·∫øu lu·ªìng ch√≠nh ƒëang th·ª±c thi
            if Thread.isMainThread {
                print("Running on the main thread")
            } else {
                print("Running on a background thread")
            }
        }
    }
    
    func updateUI() {
        DispatchQueue.main.async {
            //in ra lu·ªìng ƒëang th·ª±c thi
            print("Main thread: \(Thread.current)")
            //Ki·ªÉm tra n·∫øu lu·ªìng ch√≠nh ƒëang th·ª±c thi
            if Thread.isMainThread {
                print("Running on the main thread")
            } else {
                print("Running on a background thread")
            }
        }
    }
    
    func qosDispathQueue() {
        // M·ªôt h√†ng ƒë·ª£i t√πy ch·ªânh v·ªõi QoS l√† .userInitiated
        let queue1 = DispatchQueue(label: "qos userInitiated", qos: .userInitiated)
        // M·ªôt h√†ng ƒë·ª£i t√πy ch·ªânh v·ªõi QoS l√† .background
        let queue2 = DispatchQueue(label: "qos background", qos: .background)
        
//        let queue1 = DispatchQueue.global(qos: .userInitiated)
//        let queue2 = DispatchQueue.global(qos: .background)
        // Th·ª±c hi·ªán m·ªôt t√°c v·ª• v·ªõi QoS .userInitiated
        queue1.async {
            Thread.sleep(forTimeInterval: 5)
            for i in 0..<5 {
                print("üî¥", i)
            }
        }
        // Th·ª±c hi·ªán m·ªôt t√°c v·ª• v·ªõi QoS .background
        queue2.async {
            Thread.sleep(forTimeInterval: 5)
            for i in 100..<105 {
                print("üîµ", i)
            }
        }
        
        DispatchQueue.main.async {
            print("ƒêang th·ª±c hi·ªán t√°c v·ª• ch√≠nh.")
            // ƒê·∫∑t m√£ th·ª±c thi ·ªü ƒë√¢y
            for i in 1...5 {
                print("Main Task: \(i)")
            }
        }
    }
}

